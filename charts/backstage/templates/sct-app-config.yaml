{{- $backendAuthSecret := randAlphaNum 24 -}}
apiVersion: v1
stringData:
  app-config.yaml: |
    app:
      # Should be the same as backend.baseUrl when using the `app-backend` plugin.
      #baseUrl: http://backstage:7007
      baseUrl: {{ $.Values.app.baseUrl }}

    organization:
      name: "Red Hat Developer Hub"

    permission:
      enabled: false

    backend:
      auth:
        keys:
        - secret: {{ $backendAuthSecret | b64enc }}
      baseUrl: {{ $.Values.backend.baseUrl }}
      listen:
        port: 7007
        host: 0.0.0.0
      csp:
        connect-src: ["'self'", 'http:', 'https:']
      cors:
        origin: {{ $.Values.backend.cors.origin }}
        methods: [GET, POST, PUT, DELETE]
        credentials: true

      database:
        client: pg
        connection:
          host: "${POSTGRES_HOST}"
          port: "${POSTGRES_PORT}"
          user: "${POSTGRES_USER}"
          password: "${POSTGRES_ADMIN_PASSWORD}"
      cache:
        store: memory

      reading:
        allow:
{{- range $item := $.Values.backend.reading.allow }}
          - host: '{{ $item.host }}'
{{- end }}

    integrations:
      gitlab:
{{- range $item := $.Values.integrations.gitlab }}
      - host: {{ $item.host }}
        baseUrl: {{ $item.baseUrl }}
        apiBaseUrl: {{ $item.apiBaseUrl }}
        token: {{ $item.token }}
{{- end }}

    proxy:
      endpoints:
        '/quay/api':
          target: '{{ $.Values.quay.host }}'
          headers:
            X-Requested-With: 'XMLHttpRequest'
            # Uncomment the following line to access a private Quay Repository using a token
            Authorization: 'Bearer {{ $.Values.quay.token }}'
          changeOrigin: true
          # Change to "false" in case of using self hosted quay instance with a self-signed certificate
          secure: false

    quay:
      # The UI url for Quay, used to generate the link to Quay
      uiUrl: '{{ $.Values.quay.host }}'

    techdocs:
      builder: 'external'
      generator:
        runIn: 'local'
      publisher:
        type: 'awsS3'
        awsS3:
          bucketName: ${BUCKET_NAME}
          endpoint: ${BUCKET_URL}
          s3ForcePathStyle: true
          credentials:
            accessKeyId: ${AWS_ACCESS_KEY_ID}
            secretAccessKey: ${AWS_SECRET_ACCESS_KEY}

    auth:
      environment: production
      providers:
        oauth2Proxy: {}

    scaffolder:
      # see https://backstage.io/docs/features/software-templates/configuration for software template options

    catalog:
      rules:
        - allow: [Component, System, API, Resource, Location, Template]
      locations:
{{- range $item := $.Values.catalog.locations }}
        - target: {{ $item.target }}
          type: {{ $item.type }}
          rules:
{{- range $item1 := $item.rules }}
            - allow: {{ $item1.allow }}
{{- end }}
{{- end }}
      providers:
        gitlab:
          selfHosted:
            host: {{ $.Values.catalog.providers.gitlab.selfHosted.host }}
            schedule: # optional; same options as in TaskScheduleDefinition
              # supports cron, ISO duration, "human duration" as used in code
              frequency: { seconds: 10 }
              # supports ISO duration, "human duration" as used in code
              timeout: { seconds: 60 }
        ocm:
          env:
{{- range $item := $.Values.clusters }}
            kubernetesPluginRef: {{ $item.name }}
{{- end }}
            schedule: # optional; same options as in TaskScheduleDefinition
              # supports cron, ISO duration, "human duration" as used in code
              frequency: { seconds: 10 }
              # supports ISO duration, "human duration" as used in code
              timeout: { seconds: 60 }
            owner: group:rhdh

    argocd:
      appLocatorMethods:
{{- range $item := $.Values.argocd.appLocatorMethods }}
        - type: '{{ $item.type }}'
          instances:
{{- range $item1 := $item.instances }}
            - name: {{ $item1.name }}
              url: 	{{ $item1.url }}
              username: {{ $item1.username }}
              password: {{ $item1.password }}
{{- end }}
{{- end }}

    kubernetes:
      serviceLocatorMethod:
        type: "multiTenant"
      clusterLocatorMethods:
        - type: "config"
          clusters:
{{- range $item := $.Values.clusters }}
            - name: {{ $item.name }}
              url: {{ $item.url }}
              authProvider: "serviceAccount"
              skipTLSVerify: true
              serviceAccountToken: "{{ $item.serviceAccountToken }}"
{{- end }}
      customResources:
        - group: 'tekton.dev'
          apiVersion: 'v1beta1'
          plural: 'pipelineruns'
        - group: 'tekton.dev'
          apiVersion: 'v1beta1'
          plural: 'taskruns'
        - group: 'route.openshift.io'
          apiVersion: 'v1'
          plural: 'routes'

    enabled:
      kubernetes: true
      techdocs: true
      argocd: true
      sonarqube: false
      keycloak: true
      ocm: true
      github: false
      githubOrg: false
      gitlab: true
      jenkins: false
      permission: false
  app-config.dyamic-plugins.yaml: |
    dynamicPlugins:
      rootDirectory: dynamic-plugins-root
      frontend:
        backstage.plugin-azure-devops:
          mountPoints:
            - mountPoint: entity.page.ci/cards
              importName: EntityAzurePipelinesContent
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isAzureDevOpsAvailable
            - mountPoint: entity.page.pull-requests/cards
              importName: EntityAzurePullRequestsContent
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isAzureDevOpsAvailable
        backstage.plugin-dynatrace:
          mountPoints:
            - mountPoint: entity.page.monitoring/cards
              importName: DynatraceTab
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isDynatraceAvailable
        backstage.plugin-github-actions:
          mountPoints:
            - mountPoint: entity.page.ci/cards
              importName: EntityGithubActionsContent
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isGithubActionsAvailable
        backstage.plugin-github-issues:
          mountPoints:
            - mountPoint: entity.page.issues/cards
              importName: GithubIssuesCard
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - hasAnnotation: github.com/project-slug
        backstage.plugin-jenkins:
          mountPoints:
            - mountPoint: entity.page.ci/cards
              importName: EntityJenkinsContent
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isJenkinsAvailable
        backstage.plugin-kubernetes:
          mountPoints:
            - mountPoint: entity.page.kubernetes/cards
              importName: EntityKubernetesContent
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  anyOf:
                    - hasAnnotation: backstage.io/kubernetes-id
                    - hasAnnotation: backstage.io/kubernetes-namespace
        backstage.plugin-lighthouse:
          dynamicRoutes:
            - path: /lighthouse
              importName: LighthousePage
              menuItem:
                icon: Assessment
                text: Lighthouse
          mountPoints:
            - mountPoint: entity.page.overview/cards
              importName: EntityLastLighthouseAuditCard
              config:
                layout:
                  gridColumnEnd: "span 6"
                if:
                  allOf:
                    - isLighthouseAvailable
        backstage.plugin-pagerduty:
          mountPoints:
            - mountPoint: entity.page.overview/cards
              importName: EntityPagerDutyCard
              config:
                layout:
                  gridColumnEnd: "span 6"
                if:
                  allOf:
                    - isPluginApplicableToEntity
        backstage.plugin-sonarqube:
          mountPoints:
            - mountPoint: entity.page.overview/cards
              importName: EntitySonarQubeCard
              config:
                layout:
                  gridColumnStart: "span 4"
                  gridRowEnd: "span 2"
                if:
                  allOf:
                    - isSonarQubeAvailable
        immobiliarelabs.backstage-plugin-gitlab:
          mountPoints:
            - mountPoint: entity.page.overview/cards
              importName: EntityGitlabMergeRequestStatsCard
              config:
                layout:
                  gridRowEnd: "span 2"
                  gridColumnStart: "span 4"
                if:
                  allOf:
                    - isGitlabAvailable
            - mountPoint: entity.page.ci/cards
              importName: EntityGitlabPipelinesTable
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isGitlabAvailable
            - mountPoint: entity.page.issues/cards
              importName: EntityGitlabIssuesTable
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isGitlabAvailable
            - mountPoint: entity.page.pull-requests/cards
              importName: EntityGitlabMergeRequestsTable
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isGitlabAvailable
        janus-idp.backstage-plugin-acr:
          mountPoints:
            - mountPoint: entity.page.image-registry/cards
              importName: AcrPage
              config:
                layout:
                  gridColumn: 1 / -1
                if:
                  anyOf:
                  - isAcrAvailable
        janus-idp.backstage-plugin-jfrog-artifactory:
          mountPoints:
            - mountPoint: entity.page.image-registry/cards
              importName: JfrogArtifactoryPage
              config:
                layout:
                  gridColumn: 1 / -1
                if:
                  anyOf:
                  - isJfrogArtifactoryAvailable
        janus-idp.backstage-plugin-nexus-repository-manager:
          mountPoints:
            - mountPoint: entity.page.image-registry/cards
              importName: NexusRepositoryManagerPage
              config:
                layout:
                  gridColumn: 1 / -1
                if:
                  anyOf:
                  - isNexusRepositoryManagerAvailable
        janus-idp.backstage-plugin-ocm:
          dynamicRoutes:
            - path: /ocm
              importName: OcmPage
              menuItem:
                icon: Storage
                text: Clusters
          mountPoints:
            - mountPoint: entity.page.overview/context
              importName: ClusterContextProvider
            - mountPoint: entity.page.overview/cards
              importName: ClusterAvailableResourceCard
              config:
                layout:
                  gridRowStart: 1
                  gridColumnStart: "span 1"
                if:
                  anyOf:
                  - isKind: resource
                  - isType: kubernetes-cluster
            - mountPoint: entity.page.overview/cards
              importName: ClusterInfoCard
              config:
                if:
                  allOf:
                  - isKind: resource
                  - isType: kubernetes-cluster
        janus-idp.backstage-plugin-quay:
          mountPoints:
            - mountPoint: entity.page.image-registry/cards
              importName: QuayPage
              config:
                layout:
                  gridColumn: 1 / -1
                if:
                  anyOf:
                  - isQuayAvailable
        janus-idp.backstage-plugin-tekton:
          mountPoints:
            - mountPoint: entity.page.ci/cards
              importName: TektonCI
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isTektonCIAvailable
        janus-idp.backstage-plugin-topology:
          mountPoints:
            - mountPoint: entity.page.topology/cards
              importName: TopologyPage
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  anyOf:
                    - hasAnnotation: backstage.io/kubernetes-id
                    - hasAnnotation: backstage.io/kubernetes-namespace
        roadiehq.backstage-plugin-argo-cd:
          mountPoints:
            - mountPoint: entity.page.overview/cards
              importName: EntityArgoCDOverviewCard
              config:
                layout:
                  gridColumn: "1 / span 8"
                if:
                  allOf:
                    - isArgocdAvailable
            - mountPoint: entity.page.cd/cards
              importName: EntityArgoCDHistoryCard
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isArgocdAvailable
        roadiehq.backstage-plugin-datadog:
          mountPoints:
            - mountPoint: entity.page.monitoring/cards
              importName: EntityDatadogContent
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isDatadogAvailable
        roadiehq.backstage-plugin-github-insights:
          mountPoints:
            - mountPoint: entity.page.overview/cards
              importName: EntityGithubInsightsComplianceCard
              config:
                layout:
                  gridRowEnd: "span 2"
                  gridColumnStart: "span 4"
                if:
                  allOf:
                    - isGithubInsightsAvailable
        roadiehq.backstage-plugin-github-pull-requests:
          mountPoints:
            - mountPoint: entity.page.overview/cards
              importName: EntityGithubPullRequestsOverviewCard
              config:
                layout:
                  gridRow: "1 / span 2"
                  gridColumn: "5 / span 4"
                if:
                  allOf:
                    - isGithubPullRequestsAvailable
            - mountPoint: entity.page.pull-requests/cards
              importName: EntityGithubPullRequestsContent
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isGithubPullRequestsAvailable
        roadiehq.backstage-plugin-jira:
          mountPoints:
            - mountPoint: entity.page.issues/cards
              importName: EntityJiraOverviewCard
              config:
                layout:
                  gridColumn: "1 / -1"
                if:
                  allOf:
                    - isJiraAvailable
        roadiehq.backstage-plugin-security-insights:
          mountPoints:
            - mountPoint: entity.page.overview/cards
              importName: EntityDependabotAlertsCard
              config:
                layout:
                  gridRowEnd: "span 2"
                  gridColumnStart: "span 4"
                if:
                  allOf:
                    - isSecurityInsightsAvailable
kind: Secret
metadata:
  labels:
    app.kubernetes.io/instance: backstage
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: backstage
    app.kubernetes.io/version: v1.7.0
    helm.sh/chart: backstage-0.1.6
  name: backstage-config
type: Opaque
